<template>
	<view class="fui-top__popup-wrap" :style="{ zIndex: zIndex,background:maskBackground }" @tap.stop="handleClose"
		:ref="refMkId">
		<view :ref="refId" class="fui-top__popup"
			:style="{borderBottomLeftRadius:`${radius}rpx`,borderBottomRightRadius:`${radius}rpx`,background: background}">
			<slot></slot>
		</view>
	</view>
</template>

<script>
	/**
	 * TopPopup 顶部弹出层
	 * @description TopPopup 顶部弹出层，从顶部弹出的浮层，引导用户进行相关操作。
	 * @tutorial https://unix.firstui.cn/
	 * @property {Boolean} visible {Boolean} 是否显示顶部弹出层
	 * @property {String} background {String} 顶部弹出层背景颜色
	 * @property {Number} radius {Number} 顶部弹出层左下/右下圆角值，单位rpx
	 * @property {Number} zIndex {Number} 顶部弹出层z-index值
	 * @property {Boolean} maskClosable {Boolean} 点击遮罩 是否可关闭
	 * @property {String} maskBackground {String} 遮罩背景色
	 * @event {Function} close 点击遮罩层（maskClosable=true）时触发，() => void
	 * @event {Function} update:visible 点击遮罩层（maskClosable=true）时触发，用于双向绑定	，(event: boolean) => void
	 */
	export default {
		name: 'fui-top-popup',
		emits: ['close', 'update:visible'],
		props: {
			visible: {
				type: Boolean,
				default: false
			},
			background: {
				type: String,
				default: '#fff'
			},
			radius: {
				type: Number,
				default: 24
			},
			zIndex: {
				type: Number,
				default: 996
			},
			maskClosable: {
				type: Boolean,
				default: true
			},
			maskBackground: {
				type: String,
				default: 'rgba(0,0,0,.6)'
			}
		},
		data() {
			const refId = `fui_tp_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			const refMkId = `fui_tpmk_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			return {
				refId: refId,
				refMkId: refMkId,
				isShow: false,
				element: null as UniElement | null,
				mkElement: null as UniElement | null
			}
		},
		watch: {
			visible: {
				handler(newVal : boolean) {
					if (newVal) {
						this.open();
					} else {
						if (this.isShow) this.close();
					}
				},
				immediate: true
			}
		},
		mounted() {
			this.$nextTick(() => {
				setTimeout(() => {
					if (!this.visible) this.close();
				}, 50);
			})
		},
		methods: {
			handleClose() {
				if (!this.maskClosable) return;
				this.$emit('close');
				this.$emit('update:visible', false)
			},
			open() {
				this.isShow = true;
				this.$nextTick(() => {
					setTimeout(() => {
						this._animation(true);
					}, 50);
				})
			},
			close() {
				this.isShow = false;
				this._animation(false);
			},
			_animation(visible : boolean) {
				if (this.element == null) {
					this.element = this.$refs[this.refId] as UniElement;
				}
				if (this.mkElement == null) {
					this.mkElement = this.$refs[this.refMkId] as UniElement;
				}
				this.element!.style.setProperty('transform', `translateY(${visible ? '0' : '-100%'})`);
				this.element!.style.setProperty('opacity', visible ? '1' : '0')
				this.mkElement!.style.setProperty('opacity', visible ? '1' : '0')
				if (visible) {
					this.mkElement!.style.setProperty('visibility', 'visible');
					this.element!.style.setProperty('visibility', 'visible');
				} else {
					setTimeout(() => {
						this.mkElement!.style.setProperty('visibility', 'hidden');
						this.element!.style.setProperty('visibility', 'hidden');
					}, 300)
				}
			}
		}
	};
</script>

<style scoped>
	.fui-top__popup-wrap {
		position: fixed;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		display: flex;
		flex-direction: row;
		align-items: flex-start;
		justify-content: center;
		transition-property: opacity, visibility;
		transition-timing-function: ease-in-out;
		transition-duration: 0.3s;
		visibility: hidden;
		overflow: hidden;
		opacity: 0;
	}

	.fui-top__popup {
		width: 100%;
		transition-property: transform, opacity, visibility;
		transition-timing-function: ease-in-out;
		transition-duration: 0.3s;
		min-height: 20rpx;
		overflow: hidden;
		transform: translateY(-100%);
		display: flex;
		flex-direction: row;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
</style>