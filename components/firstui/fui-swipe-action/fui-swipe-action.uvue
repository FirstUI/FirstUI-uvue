<template>
	<view class="fui-swipe__action-wrap" :style="{marginTop:`${marginTop}rpx`,marginBottom:`${marginBottom}rpx`}">
		<view class="fui-swipe__action-inner" :class="{'fui-swipe__action-visible':!isScale}" @tap.stop="stop">
			<!-- #ifdef APP -->
			<view :ref="refLeft" class="fui-swipe__action-left" @touchstart="touchstart" @touchmove="touchmove"
				@touchend="touchend" @touchcancel="touchend">
				<slot></slot>
			</view>
			<!-- #endif -->
			<!-- #ifdef WEB -->
			<view :ref="refLeft" class="fui-swipe__action-left" @touchstart="touchstart" @touchmove="touchmove"
				@touchend="touchend" @touchcancel="touchend" @mousedown="mousedown" @mousemove="mousemove"
				@mouseup="mouseup" @mouseleave="mouseleave">
				<slot></slot>
			</view>
			<!-- #endif -->
			<view :ref="refRight" class="fui-swipe__action-right"
				:class="[`fui-swipe__action-${isScale?'scale':'translate'}`]" :id="elId">
				<slot name="buttons">
					<template v-for="(item,index) in btns" :key="index">
						<view class="fui-swipe__action-btn"
							:class="{'fui-swipe__action-bg':item.background==null || item.background==''}"
							:style="{background:item.background}" @tap.stop="appTouchEnd(index ,item)">
							<text class="fui-swipe__action-text"
								:style="{fontSize:`${item.size==null?size:item.size}rpx`,lineHeight:`${item.size==null?size:item.size}rpx`,color:`${item.color==null?color:item.color}`}">{{item.text}}</text>
						</view>
					</template>
				</slot>
			</view>
		</view>
	</view>
</template>

<script>
	import { ComponentPublicInstance, type PropType } from 'vue'
	// mixins 目前在web端问题很多，无法识别页面props、方法等，导致编译报错
	// import { unixjs } from './fui-swipe-unix.uts'
	import { FuiSwipeActionButtonParam } from '../fui-types/index.uts'
	import { fuiLang, getFuiLocaleLang } from '../fui-lang/index.uts'
	/**
	 * SwipeAction 滑动菜单
	 * @description SwipeAction 滑动菜单，用于滑动操作的组件，结合 fui-swipeaction-group 组件使用。
	 * @tutorial https://unix.firstui.cn/
	 * @property {Array} buttons {Array&lt;FuiSwipeActionButtonParam&gt;} 滑动菜单按钮数据
	 * @property {Number} size {Number}	滑动菜单按钮字体大小，单位rpx（优先使用buttons中传值）
	 * @property {String} color {String} 滑动菜单按钮字体颜色（优先使用buttons中传值）
	 * @property {Boolean} visible {Boolean} 是否显示滑动菜单，当 autoClose 为 true 时尽量避免使用该属性
	 * @property {Number} threshold	{Number} 滑动多少距离菜单展开，单位px
	 * @property {Boolean} disabled {Boolean} 是否禁止滑动
	 * @property {Boolean} autoClose {Boolean} 打开当前菜单是否自动关闭其他菜单
	 * @property {Boolean} clickClose {Boolean} 点击菜单是否立即关闭菜单，设为false时可结合@change事件同步状态以及visible属性手动关闭菜单
	 * @property {Boolean} isScale {Boolean} 菜单是否使用缩放动画显示
	 * @property {Number} marginTop {Number} 同css margin-top值，单位rpx
	 * @property {Number} marginBottom {Number} 同css margin-bottom值，单位rpx
	 * @property {Number} param	{Number} 自定义参数，事件中回传
	 * @event {Function} onclick 点击菜单按钮时触发，(event:FuiSwipeActionButtonParam) => void
	 * @event {Function} change 滑动菜单打开关闭时触发，返回打开状态，(event:boolean) => void
	 */
	export default {
		name: "fui-swipe-action",
		// mixins: [unixjs],
		emits: ['onclick', 'change'],
		props: {
			buttons: {
				type: Array as PropType<FuiSwipeActionButtonParam[]>,
				default: () : FuiSwipeActionButtonParam[] => [] as FuiSwipeActionButtonParam[]
			},
			size: {
				type: Number,
				default: 32
			},
			color: {
				type: String,
				default: '#fff'
			},
			visible: {
				type: Boolean,
				default: false
			},
			threshold: {
				type: Number,
				default: 30
			},
			disabled: {
				type: Boolean,
				default: false
			},
			autoClose: {
				type: Boolean,
				default: true
			},
			clickClose: {
				type: Boolean,
				default: true
			},
			isScale: {
				type: Boolean,
				default: false
			},
			marginTop: {
				type: Number,
				default: 0
			},
			marginBottom: {
				type: Number,
				default: 0
			},
			param: {
				type: Number,
				default: 0
			}
		},
		data() {
			const elId = `fui_swipea_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			const refLeft = `fui_swipearef_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			const refRight = `fui_swipearef_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			return {
				group: null as null | ComponentPublicInstance,
				btns: [] as FuiSwipeActionButtonParam[],
				/* mixins */
				left: 0,
				isShow: false,
				refLeft: refLeft,
				refRight: refRight,
				elId: elId,
				MIN_DISTANCE: 10,
				element: null as null | UniElement,
				rElement: null as null | UniElement,
				rightWidth: 0,
				open: false,
				direction: '',
				deltaX: 0,
				deltaY: 0,
				offsetX: 0,
				offsetY: 0,
				startX: 0,
				startY: 0,
				x: 0,
				clientX: 0,
				// #ifdef WEB
				movable: false,
				isMove: false,
				// #endif
				timer: null as null | number
			}
		},
		computed: {
			locale() : string {
				return fuiLang.locale
			}
		},
		watch: {
			locale: {
				handler(val : string) {
					const lang = getFuiLocaleLang(val)
					const swipea = lang['swipeaction'] as UTSJSONObject;
					const btns = JSON.parse<FuiSwipeActionButtonParam[]>(JSON.stringify(this.buttons))
					if (btns == null || btns.length == 0) {
						const param = [{
							text: swipea.getString('delete') as string
						}] as FuiSwipeActionButtonParam[];
						this.getButtons(param)
					} else {
						this.getButtons(btns)
					}
				},
				immediate: true
			},
			buttons(vals : FuiSwipeActionButtonParam[]) {
				this.getButtons(vals)
				this.init()
			},
			visible(newVal : boolean) {
				this.openState(newVal)
			},
			left() {
				if (this.element == null) {
					this.element = this.$refs[this.refLeft] as UniElement;
				}
				if (this.rElement == null) {
					this.rElement = this.$refs[this.refRight] as UniElement;
				}
				this.element!.style.setProperty('transform', `translateX(${this.left}px)`);
				if (this.isScale) {
					this.rElement!.style.setProperty('transform', `scaleX(${(Math.abs(this.left / this.rightWidth))})`);
				} else {
					this.rElement!.style.setProperty('transform', `translateX(${this.left + this.rightWidth}px)`);
				}
			},
			isShow(newVal : boolean) {
				this.openState(newVal)
			}
		},
		mounted() {
			this.$nextTick(() => {
				const parent = this.getParent('fui-swipeaction-group')
				if (parent) {
					const group = this.group as ComponentPublicInstance
					(group.$data['children'] as ComponentPublicInstance[]).push(this as ComponentPublicInstance);
				}
				this.init()
			})
		},
		beforeUnmount() {
			this.unInstall()
		},
		methods: {
			getButtons(vals : FuiSwipeActionButtonParam[]) {
				this.btns = [] as FuiSwipeActionButtonParam[];
				this.$nextTick(() => {
					this.btns = vals;
				})
			},
			unInstall() {
				if (this.group != null) {
					const group = this.group as ComponentPublicInstance
					const children = group.$data['children'] as ComponentPublicInstance[];
					const _this = this as ComponentPublicInstance;
					children.forEach((item : ComponentPublicInstance, index : number) => {
						if (item == _this) {
							children.splice(index, 1)
						}
					})
				}
			},
			getParent(name : string) : boolean {
				if (this.$parent == null) return false;
				let parent = this.$parent as ComponentPublicInstance;
				let parentName = parent.$options['name'];
				while (parentName != name) {
					if (parent.$parent == null) return false;
					parent = parent.$parent as ComponentPublicInstance;
					if (parent.$options['name'] == '') return false;
					parentName = parent.$options['name'];
				}
				this.group = parent;
				return true;
			},
			stop() {
				// #ifndef WEB
				if (this.clickClose && this.open) this.close();
				// #endif

				// #ifdef WEB
				if (this.clickClose && this.open && !this.isMove) this.close();
				// #endif
			},
			/* mixins */
			init() {
				if (this.timer != null) clearTimeout(this.timer as number);
				this.timer = setTimeout(() => {
					this.getSelectorQuery()
				}, 100)
				this.left = 0
				this.x = 0
			},
			closeSwipe() {
				if (this.group != null && this.autoClose) {
					const group = this.group as ComponentPublicInstance;
					group.$callMethod('closeAuto', this)
				}
			},
			appTouchEnd(index : number, item : FuiSwipeActionButtonParam) {
				const params = item;
				params.index = index;
				params.param = this.param;
				if (this.clickClose) this.close();
				this.$emit('onclick', params);
			},
			aniSwitch(isAdd : boolean) {
				if (this.element == null) {
					this.element = this.$refs[this.refLeft] as UniElement;
				}
				if (this.rElement == null) {
					this.rElement = this.$refs[this.refRight] as UniElement;
				}
				this.element!.style.setProperty('transition-duration', isAdd ? '300ms' : '0ms');
				this.element!.style.setProperty('transition-property', isAdd ? 'transform' : '');
				this.element!.style.setProperty('transition-timing-function', isAdd ? 'cubic-bezier(0.165, 0.84, 0.44, 1)' : '');
				this.rElement!.style.setProperty('transition-duration', isAdd ? '300ms' : '0ms');
				this.rElement!.style.setProperty('transition-property', isAdd ? 'transform' : '');
				this.rElement!.style.setProperty('transition-timing-function', isAdd ? 'cubic-bezier(0.165, 0.84, 0.44, 1)' : '');
			},
			touchstart(e : UniTouchEvent) {
				if (!this.disabled) {
					this.aniSwitch(false);
					this.x = this.left;
					this.stopTouchStart(e);
					if (this.autoClose) this.closeSwipe();
				}
			},
			touchmove(e : UniTouchEvent) : boolean {
				if (this.disabled) return false;
				this.stopTouchMove(e);
				if (this.direction != 'horizontal') {
					return false;
				} else {
					e.preventDefault()
				}
				this.move(this.x + this.deltaX)
				return false
			},
			touchend() {
				if (!this.disabled) this.moveDirection(this.left);
			},
			move(value : number) {
				const rightWidth = this.rightWidth
				this.left = Math.min(Math.max(value, -rightWidth), 0);
			},
			moveDirection(left : number) {
				const threshold = this.threshold;
				const open = this.open;
				const rightWidth = this.rightWidth
				if (this.deltaX == 0 && this.clickClose) {
					this.openState(false)
				} else {
					if ((!open && rightWidth > 0 && -left > threshold) || (open && rightWidth > 0 && rightWidth + left <
						threshold)) {
						this.openState(true)
					} else {
						this.openState(false)
					}
				}
			},
			openState(type : boolean) {
				const rightWidth = this.rightWidth
				let left : number;
				if (type) {
					left = -rightWidth
				} else {
					left = 0
				}
				if (this.open != type) {
					this.$emit('change', type)
				}
				this.open = type
				this.aniSwitch(true)
				this.$nextTick(() => {
					this.move(left)
					// #ifdef WEB
					setTimeout(() => {
						this.isMove = false;
					}, 50)
					// #endif
				})
			},
			close() {
				this.openState(false)
			},
			getDirection(x : number, y : number) : string {
				if (x > y && x > this.MIN_DISTANCE) {
					return 'horizontal';
				}
				if (y > x && y > this.MIN_DISTANCE) {
					return 'vertical';
				}
				return '';
			},
			resetTouchStatus() {
				this.direction = '';
				this.deltaX = 0;
				this.deltaY = 0;
				this.offsetX = 0;
				this.offsetY = 0;
			},
			stopTouchStart(event : UniTouchEvent) {
				this.resetTouchStatus();
				const touch = event.touches[0];
				this.startX = touch.clientX;
				this.startY = touch.clientY;
			},
			stopTouchMove(event : UniTouchEvent) {
				const touch = event.touches[0];;
				this.deltaX = touch.clientX - this.startX;
				this.deltaY = touch.clientY - this.startY;
				this.offsetX = Math.abs(this.deltaX);
				this.offsetY = Math.abs(this.deltaY);
				if (this.direction == '') {
					this.direction = this.getDirection(this.offsetX, this.offsetY);
				}
			},
			getSelectorQuery() {
				uni.createSelectorQuery()
					.select(`#${this.elId}`)
					.boundingClientRect()
					.exec(ret => {
						const node = ret[0] as NodeInfo;
						this.rightWidth = (node.width == null ? 0 : node.width) as number;
						this.isShow = this.visible
					})
			},
			// #ifdef WEB
			isPC() : boolean {
				if (typeof navigator != 'object') return false;
				const userAgentInfo = navigator['userAgent'];
				const Agents = ["Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod"];
				let flag = true;
				for (let v = 0; v < Agents.length - 1; v++) {
					if (userAgentInfo.indexOf(Agents[v]) > 0) {
						flag = false;
						break;
					}
				}
				return flag;
			},
			mousedown(e : UniTouchEvent) {
				if (!this.isPC()) return
				this.movable = true
				if (e['touches'] == null || e['touches'] == undefined) {
					e['touches'] = [{
						clientX: e['clientX'],
						clientY: e['clientY'],
						identifier: 1,
						pageX: e['pageX'],
						pageY: e['pageY'],
						screenX: e['screenX'],
						screenY: e['screenY']
					}] as UniTouch[];
				}
				this.touchstart(e)
			},
			mousemove(e : UniTouchEvent) {
				if (!this.isPC() || !this.movable) return;
				this.isMove = true;
				if (e['touches'] == null || e['touches'] == undefined) {
					e['touches'] = [{
						clientX: e['clientX'],
						clientY: e['clientY'],
						identifier: 1,
						pageX: e['pageX'],
						pageY: e['pageY'],
						screenX: e['screenX'],
						screenY: e['screenY']
					}] as UniTouch[];
				}
				this.touchmove(e)
			},
			mouseup() {
				if (!this.isPC() || !this.movable) return;
				this.movable = false
				this.touchend()
			},
			mouseleave() {
				if (!this.isPC() || !this.movable) return;
				this.movable = false
				this.touchend()
			}
			// #endif
		}
	}
</script>

<style scoped lang="scss">
	$fui-color-danger: #FF2B2B !default;

	@mixin swipe_ani {
		transition-duration: 0s;
		transition-property: transform;
		transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
	}

	.fui-swipe__action-wrap {
		position: relative;
		overflow: hidden;
	}

	.fui-swipe__action-inner {
		display: flex;
		flex-shrink: 0;
		position: relative;
	}

	.fui-swipe__action-visible {
		overflow: visible;
	}

	.fui-swipe__action-left {
		width: 100%;
		position: relative;
		z-index: 2;
		@include swipe_ani;
	}

	.fui-swipe__action-right {
		position: absolute;
		top: 0;
		bottom: 0;
		right: 0;
		height: 100%;
		display: flex;
		flex-direction: row;
		box-sizing: border-box;
		z-index: 1;
		@include swipe_ani;
	}

	.fui-swipe__action-translate {
		transform: translateX(100%);
	}

	.fui-swipe__action-scale {
		transform: scaleX(100%);
		transform-origin: 100% 0;
	}

	.fui-swipe__action-btn {
		display: flex;
		flex-direction: row;
		justify-content: center;
		align-items: center;
		padding: 0 48rpx;
		box-sizing: border-box;
		flex-shrink: 0;
	}

	.fui-swipe__action-text {
		flex-shrink: 0;
		text-align: center;

	}

	.fui-swipe__action-bg {
		background: $fui-color-danger !important;
	}
</style>