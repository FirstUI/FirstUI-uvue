<template>
	<text
		:class="[dot?'fui-badge__dot':'fui-badge__wrap',background!=''?'':('fui-badge__bg-'+type),absolute?'fui-badge__absolute':'',scaleRatio!=1 ?'fui-badge__trans-origin':'',background=='' && type=='white'?'fui-badge__text-color':'']"
		:style="{top:absolute?top:'auto',right:absolute?right:'auto',transform:`scale(${scaleRatio})`,marginTop:`${marginTop}rpx`,marginLeft:`${marginLeft}rpx`,marginRight:`${marginRight}rpx`,width:width,color:color,background:background}"
		@tap="handleClick" v-if="showValue!='' || dot">{{dot?'':showValue}}</text>
</template>

<script>
	/**
	 * Badge 徽章
	 * @description Badge 徽章，可自定义颜色。
	 * @tutorial https://unix.firstui.cn/
	 * @property {Number} value {Number | String} badge显示文本
	 * @property {Number} max {Number} 最大值，当值超过max时使用+号代替，仅为数字时有效，-1表示不限制
	 * @property {String} type {String}	类型，有效值：primary，success，warning，danger，purple，white
	 * @property {String} background {String} 背景色，如果设置背景色则type失效
	 * @property {String} color	{String} 字体颜色
	 * @property {Boolean} dot {Boolean} 是否显示为圆点
	 * @property {Number} marginTop {Number} margin-top值，单位rpx
	 * @property {Number} marginLeft {Number} margin-left值，单位rpx
	 * @property {Number} marginRight {Number} margin-right值，单位rpx
	 * @property {Boolean} absolute {Boolean} 是否绝对定位
	 * @property {String} top {String} top值，需带单位，absolute为true时生效
	 * @property {String} right {String} right值，需带单位，absolute为true时生效
	 * @property {Number} scaleRatio {Number} 缩放比例，当比例大于1时，外层容器需要设置 overflow: visible或者留出足够空间，避免显示不全
	 * @event {Function} onclick 点击badge时触发，无返回值，() => void
	 */
	export default {
		name: "fui-badge",
		emits: ['onclick'],
		props: {
			value: {
				type: [Object, String, Number],
				default: ''
			},
			max: {
				type: Number,
				default: -1
			},
			type: {
				type: String,
				default: 'primary'
			},
			background: {
				type: String,
				default: ''
			},
			color: {
				type: String,
				default: '#FFFFFF'
			},
			dot: {
				type: Boolean,
				default: false
			},
			marginTop: {
				type: Number,
				default: 0
			},
			marginLeft: {
				type: Number,
				default: 0
			},
			marginRight: {
				type: Number,
				default: 0
			},
			absolute: {
				type: Boolean,
				default: false
			},
			top: {
				type: String,
				default: '-8rpx'
			},
			right: {
				type: String,
				default: '-18rpx'
			},
			scaleRatio: {
				type: Number,
				default: 1
			}
		},
		data() {
			return {
				width: '0',
				showValue: ''
			};
		},
		watch: {
			value() {
				this.getWidth()
			}
		},
		mounted() {
			this.getWidth()
		},
		methods: {
			rpx2px(rpx : number) : number {
				let px : number;
				// #ifdef APP-ANDROID
				px = UTSAndroid.rpx2px(rpx)
				// #endif

				// #ifndef APP-ANDROID
				const sys : GetSystemInfoResult = uni.getSystemInfoSync()
				px = sys.windowWidth / 750 * rpx
				// #endif
				return px;
			},
			_getTextWidth(text : string) : string {
				let sum = 0;
				for (let i = 0, len = text.length; i < len; i++) {
					const code = text.charCodeAt(i) as number
					if (code <= 255)
						sum = sum + 1;
					else
						sum = sum + 2;
				}
				const rpx = (text.length > 1 ? 32 : 24) as number;
				const px = this.rpx2px(rpx);
				const strCode = text.charCodeAt(0) as number;
				let multiplier = 12;
				if (strCode >= 65 && strCode <= 90) {
					multiplier = 15;
				}
				return `${(sum / 2 * multiplier) + px}px`;
			},
			getWidth() {
				let max = this.max;
				let value : string;
				if (typeof this.value == 'string') {
					value = this.value as string;
				} else {
					if (typeof this.value == 'number') {
						const val_num = this.value as number;
						if (max == -1) {
							value = val_num.toString()
						} else {
							value = val_num > max ? `${max}+` : val_num.toString()
						}
					} else {
						if (max == -1) {
							value = this.value.toString()
						} else {
							value = parseFloat(this.value.toString()) > max ? `${max}+` : `${this.value}`
						}
					}
				}
				this.showValue = value;
				this.width = this.dot ? '8px' : this._getTextWidth(value)
			},
			handleClick() {
				this.$emit('onclick');
			}
		}
	}
</script>

<style scoped lang="scss">
	$fui-color-primary: #465CFF !default;
	$fui-color-success: #09BE4F !default;
	$fui-color-warning: #FFB703 !default;
	$fui-color-danger: #FF2B2B !default;
	$fui-color-purple: #6831FF !default;
	$fui-color-white: #FFFFFF !default;

	.fui-badge__wrap {
		height: 36rpx;
		color: #FFFFFF;
		font-size: 24rpx;
		line-height: 36rpx;
		border-radius: 100px;
		min-width: 36rpx;
		box-sizing: border-box;
		text-align: center;
		z-index: 10;
	}

	.fui-badge__dot {
		height: 8px !important;
		width: 8px !important;
		border-radius: 100px;
		z-index: 10;
	}

	.fui-badge__bg-primary {
		background-color: $fui-color-primary !important;
	}

	.fui-badge__bg-success {
		background-color: $fui-color-success !important;
	}

	.fui-badge__bg-warning {
		background-color: $fui-color-warning !important;
	}

	.fui-badge__bg-danger {
		background-color: $fui-color-danger !important;
	}

	.fui-badge__bg-purple {
		background-color: $fui-color-purple !important;
	}

	.fui-badge__bg-white {
		background-color: $fui-color-white !important;
	}

	.fui-badge__text-color {
		color: $fui-color-danger !important;
	}

	.fui-badge__trans-origin {
		transform-origin: center center;
	}

	.fui-badge__absolute {
		position: absolute;
	}
</style>