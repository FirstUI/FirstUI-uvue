<template>
	<view :ref="refId" class="fui-backdrop__wrap" :class="{'fui-backdrop__bg':background==''}"
		:style="{background:background,position:absolute?'absolute':'fixed',zIndex:zIndex}" @tap.stop="handleClick">
		<slot></slot>
	</view>
</template>

<script>
	/**
	 * Backdrop 遮罩层
	 * @description Backdrop 遮罩层，在组件中设置显示蒙层。
	 * @tutorial https://unix.firstui.cn/
	 * @property {Boolean} visible {Boolean} 是否显示遮罩层
	 * @property {String} background {String} 遮罩层背景颜色
	 * @property {Boolean} absolute {Boolean} 是否绝对定位，默认为固定定位fixed
	 * @property {Number} zIndex {Number} 遮罩层z-index值
	 * @property {Boolean} closable {Boolean} 是否可点击遮罩层，设为true后点击事件生效
	 * @event {Function} onclick 点击遮罩层且closable设为true时触发，() => void
	 * @event {Function} update:visible 点击遮罩层且closable设为true时触发，用于双向绑定，(event:boolean) => void
	 */
	export default {
		name: "fui-backdrop",
		emits: ['onclick', 'update:visible'],
		props: {
			visible: {
				type: Boolean,
				default: false
			},
			background: {
				type: String,
				default: ''
			},
			absolute: {
				type: Boolean,
				default: false
			},
			zIndex: {
				type: Number,
				default: 980
			},
			closable: {
				type: Boolean,
				default: false
			}
		},
		watch: {
			visible(val : boolean) {
				if (val) {
					this.open()
				} else {
					if (this.isShow) this.close()
				}
			}
		},
		mounted() {
			this.$nextTick(() => {
				setTimeout(() => {
					if (!this.visible) this.close();
				}, 50)
			})
		},
		data() {
			const refMkId = `fui_mask_${parseInt(Math.ceil(Math.random() * 10e5).toString(), 36)}`
			return {
				refId: refMkId,
				isShow: false,
				element: null as null | UniElement
			}
		},
		methods: {
			open() {
				this.$nextTick(() => {
					setTimeout(() => {
						this.isShow = true;
						this.maskAni(true);
					}, 50);
				})
			},
			close() {
				this.isShow = false;
				this.maskAni(false);
			},
			maskAni(visible : boolean) {
				if (this.element == null) {
					this.element = this.$refs[this.refId] as UniElement;
				}
				this.element!.style.setProperty('opacity', visible ? '1' : '0')
				if (visible) {
					this.element!.style.setProperty('visibility', 'visible');
				} else {
					setTimeout(() => {
						this.element!.style.setProperty('visibility', 'hidden');
					}, 250)
				}

			},
			handleClick() {
				if (this.closable && this.visible) {
					this.$emit('onclick')
					this.$emit('update:visible', false)
				}
			}
		}
	}
</script>

<style scoped lang="scss">
	$fui-bg-color-mask: rgba(0, 0, 0, 0.6) !default;

	.fui-backdrop__wrap {
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		height: 100%;
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		transition-property: visibility, opacity;
		transition-duration: 0.25s;
		opacity: 0;
		visibility: hidden;
	}

	.fui-backdrop__bg {
		background: $fui-bg-color-mask !important;
	}
</style>