<template>
	<view v-if="width!='0'" :style="getStyle" class="fui-grid__item">
		<view :hover-class="highlight?'fui-grid__highlight':''" :hover-stay-time="150"
			:style="{background:backgroundColor }" class="fui-grid__item-box" @tap="handleClick">
			<slot></slot>
		</view>
		<view class="fui-grid__border-right" v-if="showBorder"></view>
		<view class="fui-grid__border-bottom" v-if="showBorder"></view>
	</view>
</template>

<script>
	import { ComponentPublicInstance } from 'vue'
	/**
	 * Grid 宫格
	 * @description Grid 宫格，主要使用场景如：热门内容等。
	 * @tutorial https://unix.firstui.cn/
	 * @property {Boolean} highlight {Boolean} 是否有点击效果
	 * @property {String} backgroundColor {String} 背景颜色
	 * @property {Number} index {Number} 当前item索引	，onclick事件中返回
	 * @event {Function} onclick 点击时触发，返回传入的索引值(event: number) => void
	 */
	export default {
		name: "fui-grid-item",
		emits: ['onclick'],
		props: {
			highlight: {
				type: Boolean,
				default: true
			},
			backgroundColor: {
				type: String,
				default: 'transparent'
			},
			index: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				columns: 0,
				showBorder: true,
				width: '0',
				height: '0',
				fuiGrid: null as null | ComponentPublicInstance
			};
		},
		computed: {
			getStyle() : object {
				const mp : Map<string, string> = new Map();
				mp.set('width', this.width);
				if (this.height != '0') mp.set('height', this.height);
				return mp;
			}
		},
		created() {
			this.getParent('fui-grid')
			this.init()
		},
		beforeUnmount() {
			if (this.fuiGrid != null) {
				const grid = this.fuiGrid as ComponentPublicInstance
				const children = grid.$data['children'] as ComponentPublicInstance[];
				children.forEach((item : ComponentPublicInstance, index : number) => {
					if (item == this) {
						children.splice(index, 1)
					}
				})
			}
		},
		methods: {
			init() {
				if (this.fuiGrid != null) {
					const grid = this.fuiGrid as ComponentPublicInstance;
					this.columns = grid.$props['columns'] as number;
					this.showBorder = grid.$props['showBorder'] as boolean;
					(grid.$data['children'] as ComponentPublicInstance[]).push(this as ComponentPublicInstance);
					this.width = grid.$data['width'] as string;
					this.height = grid.$data['height'] as string;
				}
			},
			getParent(name : string) : boolean {
				if (this.$parent == null) return false;
				let parent = this.$parent as ComponentPublicInstance;
				let parentName = parent.$options['name'];
				while (parentName != name) {
					if (parent.$parent == null) return false;
					parent = parent.$parent as ComponentPublicInstance;
					if (parent.$options['name'] == '') return false;
					parentName = parent.$options['name'];
				}
				this.fuiGrid = parent;
				return true;
			},
			handleClick() {
				if (this.fuiGrid != null) {
					const grid = this.fuiGrid as ComponentPublicInstance;
					grid.$callMethod('handleClick', this.index)
				}
				this.$emit('onclick', this.index)
			}
		}
	}
</script>

<style lang="scss">
	$fui-color-border: #EEEEEE !default;
	$fui-bg-color-hover: rgba(0, 0, 0, 0.2) !default;
	$fui-grid-border-width: 1px !default;

	@mixin fui_grid_border {
		position: absolute;
		bottom: 0;
		right: 0;
		background-color: $fui-color-border;
		z-index: 1;
		pointer-events: none;
	}

	.fui-grid__item {
		display: flex;
		flex-shrink: 0;
		box-sizing: border-box;
		overflow: visible;
		position: relative;
	}

	.fui-grid__item-box {
		flex: 1;
		display: flex;
		flex-direction: column;
		box-sizing: border-box;
	}

	.fui-grid__border-right {
		@include fui_grid_border;
		width: $fui-grid-border-width;
		transform-origin: 100% 0;
		transform: scaleX(0.5);
		top: 0;
	}

	.fui-grid__border-bottom {
		height: $fui-grid-border-width;
		transform-origin: 0 100%;
		transform: scaleY(0.5);
		left: 0;
		@include fui_grid_border;
	}

	.fui-grid__highlight {
		background: $fui-bg-color-hover !important;
	}
</style>